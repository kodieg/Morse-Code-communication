
vmlab_klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000004c0  00000554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800074  00800074  00000568  2**0
                  ALLOC
  3 .stab         000013f8  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009fd  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <micInit>:
#include "commons.h"

void micInit(void)
{
	// V_ref = 2,56V
	ADMUX = 0xC0 | MIC_PA_NUMBER;
  92:	87 ec       	ldi	r24, 0xC7	; 199
  94:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 1<<ADEN | 1<<ADSC | 1<<ADATE | 0<<ADIF | 1<<ADIE |
  96:	8e ee       	ldi	r24, 0xEE	; 238
  98:	86 b9       	out	0x06, r24	; 6
	         1<<ADPS2 | 1<<ADPS1 | 0<<ADPS0;
	
	// wyzwalaj konwersje przez przepelnienie licznika 0
	SBI(SFIOR, ADTS2); // <- to przestawic dla plytki!
  9a:	80 b7       	in	r24, 0x30	; 48
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	80 bf       	out	0x30, r24	; 48
	// wyzwalanie zaraz po poprzedniej konwersji
	//SFIOR &= 0x1F; 
}
  a0:	08 95       	ret

000000a2 <micRead>:

uint16_t micRead(void)
{
	//while (!CHECK(ADCSRA, ADIF)) ;
	
	uint8_t l = ADCL;
  a2:	24 b1       	in	r18, 0x04	; 4
	uint8_t h = ADCH;
  a4:	45 b1       	in	r20, 0x05	; 5
	
	SBI(ADCSRA, ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
  a8:	94 2f       	mov	r25, r20
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	28 2b       	or	r18, r24
  b0:	39 2b       	or	r19, r25
	
	return ((uint16_t)h << 8) | l;
}
  b2:	c9 01       	movw	r24, r18
  b4:	08 95       	ret

000000b6 <__vector_9>:

volatile uint8_t ReceivedValue = 0;
volatile uint8_t ReceivedCounter = 0;


ISR(TIMER0_OVF_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
}	
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <main>:
	    }				
    }		
}

int main(void)
{
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	lcdInit();
  d0:	0e 94 0c 02 	call	0x418	; 0x418 <lcdInit>
	micInit();
  d4:	0e 94 49 00 	call	0x92	; 0x92 <micInit>
	counterInit();
  d8:	0e 94 57 02 	call	0x4ae	; 0x4ae <counterInit>
	
    LD_DDR = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
	SWITCH_DDR = 0x00;
  e0:	14 ba       	out	0x14, r1	; 20
	SWITCH_PORT = 0xFF;
  e2:	85 bb       	out	0x15, r24	; 21
	
    uint8_t localReceivedCounter = 0;
	
	lcdString("Hello world!\0");
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 97 01 	call	0x32e	; 0x32e <lcdString>
  ec:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	c8 ec       	ldi	r28, 0xC8	; 200
  f0:	d0 e0       	ldi	r29, 0x00	; 0

	while(1)
	{
		WorkMode = ~SWITCH_PIN;
  f2:	83 b3       	in	r24, 0x13	; 19
  f4:	80 95       	com	r24
  f6:	80 93 76 00 	sts	0x0076, r24
		
		if (!CHECK(WorkMode, RECEIVE_MODE))
  fa:	86 ff       	sbrs	r24, 6
  fc:	16 c0       	rjmp	.+44     	; 0x12a <main+0x60>
	        else
                lcdInt(EmaThreshold);
		}
		else {
			// if there is something to read, receive it
		    if (localReceivedCounter < ReceivedCounter)	{
  fe:	80 91 7a 00 	lds	r24, 0x007A
 102:	18 17       	cp	r17, r24
 104:	18 f1       	brcs	.+70     	; 0x14c <main+0x82>
			    lcdInt(ReceivedValue);
				++localReceivedCounter;
		    }
			// if there is something more to read, that means
			// we probably lost some bit!
			if (localReceivedCounter < ReceivedCounter) 
 106:	80 91 7a 00 	lds	r24, 0x007A
 10a:	18 17       	cp	r17, r24
 10c:	d8 f0       	brcs	.+54     	; 0x144 <main+0x7a>
			    lcdData('X');
 10e:	24 ef       	ldi	r18, 0xF4	; 244
 110:	31 e0       	ldi	r19, 0x01	; 1
 112:	ce 01       	movw	r24, r28
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d1 f7       	brne	.-12     	; 0x112 <main+0x48>
	
	lcdString("Hello world!\0");

	while(1)
	{
		WorkMode = ~SWITCH_PIN;
 11e:	83 b3       	in	r24, 0x13	; 19
 120:	80 95       	com	r24
 122:	80 93 76 00 	sts	0x0076, r24
		
		if (!CHECK(WorkMode, RECEIVE_MODE))
 126:	86 fd       	sbrc	r24, 6
 128:	ea cf       	rjmp	.-44     	; 0xfe <main+0x34>
		{
            lcdClear();
 12a:	0e 94 00 02 	call	0x400	; 0x400 <lcdClear>
  
	        if (WorkMode == 0)
 12e:	80 91 76 00 	lds	r24, 0x0076
 132:	88 23       	and	r24, r24
 134:	91 f4       	brne	.+36     	; 0x15a <main+0x90>
		        lcdInt(AvgVal);
 136:	80 91 77 00 	lds	r24, 0x0077
 13a:	90 91 78 00 	lds	r25, 0x0078
 13e:	0e 94 a6 01 	call	0x34c	; 0x34c <lcdInt>
 142:	e5 cf       	rjmp	.-54     	; 0x10e <main+0x44>
				++localReceivedCounter;
		    }
			// if there is something more to read, that means
			// we probably lost some bit!
			if (localReceivedCounter < ReceivedCounter) 
			    lcdData('X');
 144:	88 e5       	ldi	r24, 0x58	; 88
 146:	0e 94 93 01 	call	0x326	; 0x326 <lcdData>
 14a:	e1 cf       	rjmp	.-62     	; 0x10e <main+0x44>
                lcdInt(EmaThreshold);
		}
		else {
			// if there is something to read, receive it
		    if (localReceivedCounter < ReceivedCounter)	{
			    lcdInt(ReceivedValue);
 14c:	80 91 79 00 	lds	r24, 0x0079
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 a6 01 	call	0x34c	; 0x34c <lcdInt>
				++localReceivedCounter;
 156:	1f 5f       	subi	r17, 0xFF	; 255
 158:	d6 cf       	rjmp	.-84     	; 0x106 <main+0x3c>
            lcdClear();
  
	        if (WorkMode == 0)
		        lcdInt(AvgVal);
	        else
                lcdInt(EmaThreshold);
 15a:	80 91 6e 00 	lds	r24, 0x006E
 15e:	90 91 6f 00 	lds	r25, 0x006F
 162:	0e 94 a6 01 	call	0x34c	; 0x34c <lcdInt>
 166:	d3 cf       	rjmp	.-90     	; 0x10e <main+0x44>

00000168 <__vector_14>:


ISR(TIMER0_OVF_vect) {
}	

ISR(ADC_vect) {
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31

   const uint16_t micVal = micRead();
 18a:	0e 94 51 00 	call	0xa2	; 0xa2 <micRead>
 18e:	ac 01       	movw	r20, r24

	if (AvgVal < micVal)
 190:	80 91 77 00 	lds	r24, 0x0077
 194:	90 91 78 00 	lds	r25, 0x0078
 198:	84 17       	cp	r24, r20
 19a:	95 07       	cpc	r25, r21
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <__vector_14+0x38>
 19e:	5d c0       	rjmp	.+186    	; 0x25a <__vector_14+0xf2>
	    AvgVal = micVal;
 1a0:	50 93 78 00 	sts	0x0078, r21
 1a4:	40 93 77 00 	sts	0x0077, r20
		// avg_n+1 = (avg_n*(E-1))/E + mic/E
		// avg_n+1 = avg_n - avg_n/E + mic/E
		AvgVal = AvgVal - diffVal + (micVal >> EMA_RATE);
	}		
	
	if (CHECK(WorkMode, DETECT_MAX_MODE) && AvgVal > EmaThreshold)
 1a8:	40 91 76 00 	lds	r20, 0x0076
 1ac:	84 2f       	mov	r24, r20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	bc 01       	movw	r22, r24
 1b2:	60 74       	andi	r22, 0x40	; 64
 1b4:	70 70       	andi	r23, 0x00	; 0
 1b6:	46 ff       	sbrs	r20, 6
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <__vector_14+0x6a>
 1ba:	20 91 77 00 	lds	r18, 0x0077
 1be:	30 91 78 00 	lds	r19, 0x0078
 1c2:	80 91 6e 00 	lds	r24, 0x006E
 1c6:	90 91 6f 00 	lds	r25, 0x006F
 1ca:	82 17       	cp	r24, r18
 1cc:	93 07       	cpc	r25, r19
 1ce:	08 f4       	brcc	.+2      	; 0x1d2 <__vector_14+0x6a>
 1d0:	66 c0       	rjmp	.+204    	; 0x29e <__vector_14+0x136>
	    EmaThreshold = AvgVal;
		
	if (CHECK(WorkMode, RESET_MAX_MODE))
 1d2:	47 fd       	sbrc	r20, 7
 1d4:	6e c0       	rjmp	.+220    	; 0x2b2 <__vector_14+0x14a>
	    EmaThreshold = 0;
	
	// DEBUG led output
	if (AvgVal > EmaThreshold)
 1d6:	80 91 77 00 	lds	r24, 0x0077
 1da:	90 91 78 00 	lds	r25, 0x0078
 1de:	20 91 6e 00 	lds	r18, 0x006E
 1e2:	30 91 6f 00 	lds	r19, 0x006F
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	a0 f5       	brcc	.+104    	; 0x254 <__vector_14+0xec>
	    LD_DDR = 0x00;
 1ec:	17 ba       	out	0x17, r1	; 23
	else
	    LD_DDR = 0xFF;
		
    if (CHECK(WorkMode, RECEIVE_MODE)) {
 1ee:	67 2b       	or	r22, r23
 1f0:	01 f1       	breq	.+64     	; 0x232 <__vector_14+0xca>
	    if (AvgVal > EmaThreshold)
 1f2:	80 91 77 00 	lds	r24, 0x0077
 1f6:	90 91 78 00 	lds	r25, 0x0078
 1fa:	28 17       	cp	r18, r24
 1fc:	39 07       	cpc	r19, r25
 1fe:	08 f4       	brcc	.+2      	; 0x202 <__vector_14+0x9a>
 200:	5d c0       	rjmp	.+186    	; 0x2bc <__vector_14+0x154>
		    ++RepeatCount;	
	    else {
			
			if (RepeatCount >= LongRepeat)
 202:	80 91 74 00 	lds	r24, 0x0074
 206:	90 91 75 00 	lds	r25, 0x0075
 20a:	80 97       	sbiw	r24, 0x20	; 32
 20c:	08 f0       	brcs	.+2      	; 0x210 <__vector_14+0xa8>
 20e:	60 c0       	rjmp	.+192    	; 0x2d0 <__vector_14+0x168>
			    ReceivedValue = 1;
		    else if (RepeatCount >= ShortRepeat)
 210:	80 91 74 00 	lds	r24, 0x0074
 214:	90 91 75 00 	lds	r25, 0x0075
 218:	08 97       	sbiw	r24, 0x08	; 8
 21a:	10 f0       	brcs	.+4      	; 0x220 <__vector_14+0xb8>
			    ReceivedValue = 0;
 21c:	10 92 79 00 	sts	0x0079, r1
			
			++ReceivedCounter;
 220:	80 91 7a 00 	lds	r24, 0x007A
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 7a 00 	sts	0x007A, r24
			RepeatCount = 0;
 22a:	10 92 75 00 	sts	0x0075, r1
 22e:	10 92 74 00 	sts	0x0074, r1
	    }				
    }		
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti
	
	// DEBUG led output
	if (AvgVal > EmaThreshold)
	    LD_DDR = 0x00;
	else
	    LD_DDR = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	87 bb       	out	0x17, r24	; 23
 258:	ca cf       	rjmp	.-108    	; 0x1ee <__vector_14+0x86>
   const uint16_t micVal = micRead();

	if (AvgVal < micVal)
	    AvgVal = micVal;
	else {
		uint16_t diffVal = (AvgVal >> EMA_RATE);
 25a:	80 91 77 00 	lds	r24, 0x0077
 25e:	90 91 78 00 	lds	r25, 0x0078
 262:	69 2f       	mov	r22, r25
 264:	77 27       	eor	r23, r23
		
		// if AvgVal >> EMA_RATE would be underflow
		if (diffVal == 0) {
 266:	61 15       	cp	r22, r1
 268:	71 05       	cpc	r23, r1
 26a:	51 f4       	brne	.+20     	; 0x280 <__vector_14+0x118>
			// asserting that never diffVal > AvgVal
		    diffVal = AvgVal > EMA_RATE ? EMA_RATE : AvgVal;
 26c:	80 91 77 00 	lds	r24, 0x0077
 270:	90 91 78 00 	lds	r25, 0x0078
 274:	09 97       	sbiw	r24, 0x09	; 9
 276:	80 f5       	brcc	.+96     	; 0x2d8 <__vector_14+0x170>
 278:	60 91 77 00 	lds	r22, 0x0077
 27c:	70 91 78 00 	lds	r23, 0x0078
		}			
	
		// avg_n+1 = (avg_n*(E-1))/E + mic/E
		// avg_n+1 = avg_n - avg_n/E + mic/E
		AvgVal = AvgVal - diffVal + (micVal >> EMA_RATE);
 280:	20 91 77 00 	lds	r18, 0x0077
 284:	30 91 78 00 	lds	r19, 0x0078
 288:	85 2f       	mov	r24, r21
 28a:	99 27       	eor	r25, r25
 28c:	82 0f       	add	r24, r18
 28e:	93 1f       	adc	r25, r19
 290:	86 1b       	sub	r24, r22
 292:	97 0b       	sbc	r25, r23
 294:	90 93 78 00 	sts	0x0078, r25
 298:	80 93 77 00 	sts	0x0077, r24
 29c:	85 cf       	rjmp	.-246    	; 0x1a8 <__vector_14+0x40>
	}		
	
	if (CHECK(WorkMode, DETECT_MAX_MODE) && AvgVal > EmaThreshold)
	    EmaThreshold = AvgVal;
 29e:	80 91 77 00 	lds	r24, 0x0077
 2a2:	90 91 78 00 	lds	r25, 0x0078
 2a6:	90 93 6f 00 	sts	0x006F, r25
 2aa:	80 93 6e 00 	sts	0x006E, r24
		
	if (CHECK(WorkMode, RESET_MAX_MODE))
 2ae:	47 ff       	sbrs	r20, 7
 2b0:	92 cf       	rjmp	.-220    	; 0x1d6 <__vector_14+0x6e>
	    EmaThreshold = 0;
 2b2:	10 92 6f 00 	sts	0x006F, r1
 2b6:	10 92 6e 00 	sts	0x006E, r1
 2ba:	8d cf       	rjmp	.-230    	; 0x1d6 <__vector_14+0x6e>
	else
	    LD_DDR = 0xFF;
		
    if (CHECK(WorkMode, RECEIVE_MODE)) {
	    if (AvgVal > EmaThreshold)
		    ++RepeatCount;	
 2bc:	80 91 74 00 	lds	r24, 0x0074
 2c0:	90 91 75 00 	lds	r25, 0x0075
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 75 00 	sts	0x0075, r25
 2ca:	80 93 74 00 	sts	0x0074, r24
 2ce:	b1 cf       	rjmp	.-158    	; 0x232 <__vector_14+0xca>
	    else {
			
			if (RepeatCount >= LongRepeat)
			    ReceivedValue = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 79 00 	sts	0x0079, r24
 2d6:	a4 cf       	rjmp	.-184    	; 0x220 <__vector_14+0xb8>
		uint16_t diffVal = (AvgVal >> EMA_RATE);
		
		// if AvgVal >> EMA_RATE would be underflow
		if (diffVal == 0) {
			// asserting that never diffVal > AvgVal
		    diffVal = AvgVal > EMA_RATE ? EMA_RATE : AvgVal;
 2d8:	68 e0       	ldi	r22, 0x08	; 8
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	d1 cf       	rjmp	.-94     	; 0x280 <__vector_14+0x118>

000002de <lcdSend4Bits>:

#include "commons.h"

void lcdSend4Bits(uint8_t data)
{    
    SBI(LCD_E_PORT, LCD_OE);
 2de:	91 9a       	sbi	0x12, 1	; 18
    
    SBI(LCD_DATA_PORT, LCD_D4);
 2e0:	92 9a       	sbi	0x12, 2	; 18
    SBI(LCD_DATA_PORT, LCD_D5);  
 2e2:	93 9a       	sbi	0x12, 3	; 18
    SBI(LCD_DATA_PORT, LCD_D6);
 2e4:	94 9a       	sbi	0x12, 4	; 18
    SBI(LCD_DATA_PORT, LCD_D7);
 2e6:	95 9a       	sbi	0x12, 5	; 18
    
    if (!CHECK(data, 4))
 2e8:	98 2f       	mov	r25, r24
 2ea:	84 ff       	sbrs	r24, 4
        CBI(LCD_DATA_PORT, LCD_D4);
 2ec:	92 98       	cbi	0x12, 2	; 18
    if (!CHECK(data, 5))
 2ee:	95 ff       	sbrs	r25, 5
        CBI(LCD_DATA_PORT, LCD_D5);
 2f0:	93 98       	cbi	0x12, 3	; 18
    if (!CHECK(data, 6))
 2f2:	96 ff       	sbrs	r25, 6
        CBI(LCD_DATA_PORT, LCD_D6);
 2f4:	94 98       	cbi	0x12, 4	; 18
    if (!CHECK(data, 7))
 2f6:	87 ff       	sbrs	r24, 7
        CBI(LCD_DATA_PORT, LCD_D7);
 2f8:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcdSend4Bits+0x1e>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 300:	91 98       	cbi	0x12, 1	; 18
}
 302:	08 95       	ret

00000304 <lcdSend4BitsMode>:

void lcdSend4BitsMode(uint8_t data)
{
 304:	1f 93       	push	r17
 306:	18 2f       	mov	r17, r24
    lcdSend4Bits(data);
 308:	0e 94 6f 01 	call	0x2de	; 0x2de <lcdSend4Bits>
    SWAP(data);
 30c:	81 2f       	mov	r24, r17
 30e:	82 95       	swap	r24
 310:	8f 70       	andi	r24, 0x0F	; 15
 312:	12 95       	swap	r17
 314:	10 7f       	andi	r17, 0xF0	; 240
    lcdSend4Bits(data);
 316:	81 2b       	or	r24, r17
 318:	0e 94 6f 01 	call	0x2de	; 0x2de <lcdSend4Bits>
 31c:	8a e6       	ldi	r24, 0x6A	; 106
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <lcdSend4BitsMode+0x1a>
    
    _delay_us(40);
}
 322:	1f 91       	pop	r17
 324:	08 95       	ret

00000326 <lcdData>:
}	    
    
//send 8bit data to the LCD using R16 as argument
void lcdData(uint8_t data)
{
    SBI(LCD_RS_PORT, LCD_RS);
 326:	90 9a       	sbi	0x12, 0	; 18
    lcdSend4BitsMode(data);
 328:	0e 94 82 01 	call	0x304	; 0x304 <lcdSend4BitsMode>
}
 32c:	08 95       	ret

0000032e <lcdString>:

void lcdString(char* str)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
	while (*str != 0) 
 334:	88 81       	ld	r24, Y
 336:	88 23       	and	r24, r24
 338:	31 f0       	breq	.+12     	; 0x346 <lcdString+0x18>
	{
		lcdData(*str);
 33a:	0e 94 93 01 	call	0x326	; 0x326 <lcdData>
		++str;
 33e:	21 96       	adiw	r28, 0x01	; 1
    lcdSend4BitsMode(data);
}

void lcdString(char* str)
{
	while (*str != 0) 
 340:	88 81       	ld	r24, Y
 342:	88 23       	and	r24, r24
 344:	d1 f7       	brne	.-12     	; 0x33a <lcdString+0xc>
	{
		lcdData(*str);
		++str;
	}	
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <lcdInt>:

void lcdInt(int16_t i)
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	7c 01       	movw	r14, r24
	if (i < 0) 
 35c:	97 fd       	sbrc	r25, 7
 35e:	41 c0       	rjmp	.+130    	; 0x3e2 <lcdInt+0x96>
		i = -i;
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	e8 16       	cp	r14, r24
 364:	f1 04       	cpc	r15, r1
 366:	0c f4       	brge	.+2      	; 0x36a <lcdInt+0x1e>
 368:	45 c0       	rjmp	.+138    	; 0x3f4 <lcdInt+0xa8>
 36a:	c7 01       	movw	r24, r14
 36c:	10 e0       	ldi	r17, 0x00	; 0
	{
		tmp >>= 4;
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
		++str;
	}	
}

void lcdInt(int16_t i)
{
 37e:	1c 5f       	subi	r17, 0xFC	; 252
		i = -i;
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 380:	80 31       	cpi	r24, 0x10	; 16
 382:	91 05       	cpc	r25, r1
 384:	a4 f7       	brge	.-24     	; 0x36e <lcdInt+0x22>
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 386:	17 fd       	sbrc	r17, 7
 388:	24 c0       	rjmp	.+72     	; 0x3d2 <lcdInt+0x86>
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <lcdInt+0x5c>
	{
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
 38c:	80 e3       	ldi	r24, 0x30	; 48
 38e:	8c 0f       	add	r24, r28
 390:	0e 94 93 01 	call	0x326	; 0x326 <lcdData>
		++str;
	}	
}

void lcdInt(int16_t i)
{
 394:	14 50       	subi	r17, 0x04	; 4
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 396:	17 fd       	sbrc	r17, 7
 398:	1c c0       	rjmp	.+56     	; 0x3d2 <lcdInt+0x86>
	{
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
		i -= div << log2;
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <lcdInt+0x54>
 39c:	cc 0f       	add	r28, r28
 39e:	dd 1f       	adc	r29, r29
 3a0:	ca 94       	dec	r12
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <lcdInt+0x50>
 3a4:	ec 1a       	sub	r14, r28
 3a6:	fd 0a       	sbc	r15, r29
		log2 += 4;	
	}
	
	while (log2 >= 0)
	{
		int16_t div = i >> log2;
 3a8:	c1 2e       	mov	r12, r17
 3aa:	dd 24       	eor	r13, r13
 3ac:	c7 fc       	sbrc	r12, 7
 3ae:	d0 94       	com	r13
 3b0:	e7 01       	movw	r28, r14
 3b2:	0c 2c       	mov	r0, r12
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <lcdInt+0x6e>
 3b6:	d5 95       	asr	r29
 3b8:	c7 95       	ror	r28
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <lcdInt+0x6a>
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
 3be:	ca 30       	cpi	r28, 0x0A	; 10
 3c0:	d1 05       	cpc	r29, r1
 3c2:	24 f3       	brlt	.-56     	; 0x38c <lcdInt+0x40>
 3c4:	87 e3       	ldi	r24, 0x37	; 55
 3c6:	8c 0f       	add	r24, r28
 3c8:	0e 94 93 01 	call	0x326	; 0x326 <lcdData>
		++str;
	}	
}

void lcdInt(int16_t i)
{
 3cc:	14 50       	subi	r17, 0x04	; 4
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 3ce:	17 ff       	sbrs	r17, 7
 3d0:	e4 cf       	rjmp	.-56     	; 0x39a <lcdInt+0x4e>
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
		i -= div << log2;
		log2 -= 4;
	}	
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	df 90       	pop	r13
 3de:	cf 90       	pop	r12
 3e0:	08 95       	ret

void lcdInt(int16_t i)
{
	if (i < 0) 
	{
		lcdString("-");
 3e2:	82 e7       	ldi	r24, 0x72	; 114
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 97 01 	call	0x32e	; 0x32e <lcdString>
		i = -i;
 3ea:	f0 94       	com	r15
 3ec:	e1 94       	neg	r14
 3ee:	f1 08       	sbc	r15, r1
 3f0:	f3 94       	inc	r15
 3f2:	b6 cf       	rjmp	.-148    	; 0x360 <lcdInt+0x14>
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	d8 cf       	rjmp	.-80     	; 0x3a8 <lcdInt+0x5c>

000003f8 <lcdInstr>:
	}	
}

void lcdInstr(uint8_t instr)
{
    CBI(LCD_RS_PORT, LCD_RS);
 3f8:	90 98       	cbi	0x12, 0	; 18
    lcdSend4BitsMode(instr);
 3fa:	0e 94 82 01 	call	0x304	; 0x304 <lcdSend4BitsMode>
 3fe:	08 95       	ret

00000400 <lcdClear>:
    lcdInstr(pos | (1<<7));
}

void lcdClear(void)
{
	lcdInstr(0x01); //0b00000001	
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 406:	80 e7       	ldi	r24, 0x70	; 112
 408:	97 e1       	ldi	r25, 0x17	; 23
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <lcdClear+0xa>
	_delay_ms(3);
}	    
 40e:	08 95       	ret

00000410 <lcdGoTo>:
}    
 
//move cursor to pos position (7 bit)
void lcdGoTo(uint8_t pos)
{
    lcdInstr(pos | (1<<7));
 410:	80 68       	ori	r24, 0x80	; 128
 412:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>
}
 416:	08 95       	ret

00000418 <lcdInit>:
{
    // based on http://www.mimuw.edu.pl/~marpe/mikrokontrolery/w5_klawisze_lcd.pdf 
    // slide no. 26
    
    // set input/output direction
    SBI(LCD_DATA_DDR, LCD_D4);
 418:	8a 9a       	sbi	0x11, 2	; 17
    SBI(LCD_DATA_DDR, LCD_D5);
 41a:	8b 9a       	sbi	0x11, 3	; 17
    SBI(LCD_DATA_DDR, LCD_D6);
 41c:	8c 9a       	sbi	0x11, 4	; 17
    SBI(LCD_DATA_DDR, LCD_D7);      
 41e:	8d 9a       	sbi	0x11, 5	; 17
    SBI(LCD_E_DDR, LCD_OE);   
 420:	89 9a       	sbi	0x11, 1	; 17
    SBI(LCD_RS_DDR, LCD_RS);
 422:	88 9a       	sbi	0x11, 0	; 17
    
    CBI(LCD_RS_PORT, LCD_RS);
 424:	90 98       	cbi	0x12, 0	; 18
    CBI(LCD_E_PORT, LCD_OE);
 426:	91 98       	cbi	0x12, 1	; 18
 428:	20 e9       	ldi	r18, 0x90	; 144
 42a:	31 e0       	ldi	r19, 0x01	; 1
 42c:	48 ec       	ldi	r20, 0xC8	; 200
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	68 ec       	ldi	r22, 0xC8	; 200
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	ca 01       	movw	r24, r20
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <lcdInit+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43e:	c1 f7       	brne	.-16     	; 0x430 <lcdInit+0x18>
    
    _delay_ms(40);
    
    SBI(LCD_E_PORT, LCD_OE);
 440:	91 9a       	sbi	0x12, 1	; 18
    SBI(LCD_DATA_PORT, LCD_D4);
 442:	92 9a       	sbi	0x12, 2	; 18
    SBI(LCD_DATA_PORT, LCD_D5);
 444:	93 9a       	sbi	0x12, 3	; 18
    CBI(LCD_DATA_PORT, LCD_D6);
 446:	94 98       	cbi	0x12, 4	; 18
    CBI(LCD_DATA_PORT, LCD_D7);
 448:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	98 2f       	mov	r25, r24
 44e:	9a 95       	dec	r25
 450:	f1 f7       	brne	.-4      	; 0x44e <lcdInit+0x36>
    
    _delay_loop_1(1); // 3+ cycles

    CBI(LCD_E_PORT, LCD_OE);
 452:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 454:	e8 e0       	ldi	r30, 0x08	; 8
 456:	f0 e2       	ldi	r31, 0x20	; 32
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcdInit+0x40>
    
    _delay_ms(4.1);
    
    SBI(LCD_E_PORT, LCD_OE);
 45c:	91 9a       	sbi	0x12, 1	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 45e:	98 2f       	mov	r25, r24
 460:	9a 95       	dec	r25
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 464:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 466:	fb 01       	movw	r30, r22
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
    
    _delay_us(100);
    
    SBI(LCD_E_PORT, LCD_OE);
 46c:	91 9a       	sbi	0x12, 1	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 46e:	98 2f       	mov	r25, r24
 470:	9a 95       	dec	r25
 472:	f1 f7       	brne	.-4      	; 0x470 <__stack+0x11>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 474:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 476:	fb 01       	movw	r30, r22
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
    
    _delay_us(100);

    SBI(LCD_E_PORT, LCD_OE);
 47c:	91 9a       	sbi	0x12, 1	; 18
    CBI(LCD_DATA_PORT, LCD_D4);
 47e:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE); 
 484:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 486:	cb 01       	movw	r24, r22
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__stack+0x29>
    
    _delay_us(100);
        
    lcdInstr(0x28); //0b00101000
 48c:	88 e2       	ldi	r24, 0x28	; 40
 48e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>
    
    lcdInstr(0x06); //0b00000110
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>
    
    lcdInstr(0x0f); //0b00001111
 498:	8f e0       	ldi	r24, 0x0F	; 15
 49a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>

    lcdInstr(0x01); //0b00000001
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcdInstr>
 4a4:	80 ea       	ldi	r24, 0xA0	; 160
 4a6:	9f e0       	ldi	r25, 0x0F	; 15
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__stack+0x49>
    
    _delay_ms(2);    
}    
 4ac:	08 95       	ret

000004ae <counterInit>:
#include <avr/interrupt.h>

void counterInit(void) 
{
	const uint8_t TIMER0_RUNNING_NORMAL = 1 << CS02;
	TCCR0 = TIMER0_RUNNING_NORMAL;	
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
 4b2:	89 b7       	in	r24, 0x39	; 57
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	89 bf       	out	0x39, r24	; 57
	sei();
 4b8:	78 94       	sei
}
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
