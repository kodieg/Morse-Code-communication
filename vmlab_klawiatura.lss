
vmlab_klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002b6  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ed0  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008cd  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <micInit>:
#include "commons.h"

void micInit(void)
{
	// V_ref = 2,56V
	ADMUX = 0xC0 | MIC_PA_NUMBER;
  82:	87 ec       	ldi	r24, 0xC7	; 199
  84:	87 b9       	out	0x07, r24	; 7
	// Starts ADC, starts conversion, no interrupts,
	
	
	ADCSRA = 1<<ADEN | 1<<ADSC | 1<<ADATE | 1<<ADIF | 0<<ADIE |
  86:	87 ef       	ldi	r24, 0xF7	; 247
  88:	86 b9       	out	0x06, r24	; 6
	         1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;
	
	SFIOR &= 0x1F;
  8a:	80 b7       	in	r24, 0x30	; 48
  8c:	8f 71       	andi	r24, 0x1F	; 31
  8e:	80 bf       	out	0x30, r24	; 48
}
  90:	08 95       	ret

00000092 <micRead>:

uint16_t micRead(void)
{
	while (!CHECK(ADCSRA, ADIF)) ;
  92:	34 9b       	sbis	0x06, 4	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <micRead>
	
	uint8_t l = ADCL;
  96:	24 b1       	in	r18, 0x04	; 4
	uint8_t h = ADCH;
  98:	45 b1       	in	r20, 0x05	; 5
	
	SBI(ADCSRA, ADIF);
  9a:	34 9a       	sbi	0x06, 4	; 6
  9c:	94 2f       	mov	r25, r20
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	28 2b       	or	r18, r24
  a4:	39 2b       	or	r19, r25
	
	return ((uint16_t)h << 8) | l;
}
  a6:	c9 01       	movw	r24, r18
  a8:	08 95       	ret

000000aa <main>:
    }

}
*/
int main(void)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
    LD_DDR = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23

	lcdInit();
  b2:	0e 94 0e 01 	call	0x21c	; 0x21c <lcdInit>
	micInit();
  b6:	0e 94 41 00 	call	0x82	; 0x82 <micInit>
	
    uint8_t counter = 48;

	lcdString("Hello world!\0");
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 99 00 	call	0x132	; 0x132 <lcdString>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	9c e9       	ldi	r25, 0x9C	; 156
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x1c>
  ca:	c0 e2       	ldi	r28, 0x20	; 32
  cc:	de e4       	ldi	r29, 0x4E	; 78
	
	for(uint8_t i = 0; 1; ++i)
	{
		//if (i == 0) 
		{
			lcdClear();
  ce:	0e 94 02 01 	call	0x204	; 0x204 <lcdClear>
			lcdInt(micRead());
  d2:	0e 94 49 00 	call	0x92	; 0x92 <micRead>
  d6:	0e 94 a8 00 	call	0x150	; 0x150 <lcdInt>
  da:	ce 01       	movw	r24, r28
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x32>
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0x24>

000000e2 <lcdSend4Bits>:

#include "commons.h"

void lcdSend4Bits(uint8_t data)
{    
    SBI(LCD_E_PORT, LCD_OE);
  e2:	91 9a       	sbi	0x12, 1	; 18
    
    SBI(LCD_DATA_PORT, LCD_D4);
  e4:	92 9a       	sbi	0x12, 2	; 18
    SBI(LCD_DATA_PORT, LCD_D5);  
  e6:	93 9a       	sbi	0x12, 3	; 18
    SBI(LCD_DATA_PORT, LCD_D6);
  e8:	94 9a       	sbi	0x12, 4	; 18
    SBI(LCD_DATA_PORT, LCD_D7);
  ea:	95 9a       	sbi	0x12, 5	; 18
    
    if (!CHECK(data, 4))
  ec:	98 2f       	mov	r25, r24
  ee:	84 ff       	sbrs	r24, 4
        CBI(LCD_DATA_PORT, LCD_D4);
  f0:	92 98       	cbi	0x12, 2	; 18
    if (!CHECK(data, 5))
  f2:	95 ff       	sbrs	r25, 5
        CBI(LCD_DATA_PORT, LCD_D5);
  f4:	93 98       	cbi	0x12, 3	; 18
    if (!CHECK(data, 6))
  f6:	96 ff       	sbrs	r25, 6
        CBI(LCD_DATA_PORT, LCD_D6);
  f8:	94 98       	cbi	0x12, 4	; 18
    if (!CHECK(data, 7))
  fa:	87 ff       	sbrs	r24, 7
        CBI(LCD_DATA_PORT, LCD_D7);
  fc:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <lcdSend4Bits+0x1e>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 104:	91 98       	cbi	0x12, 1	; 18
}
 106:	08 95       	ret

00000108 <lcdSend4BitsMode>:

void lcdSend4BitsMode(uint8_t data)
{
 108:	1f 93       	push	r17
 10a:	18 2f       	mov	r17, r24
    lcdSend4Bits(data);
 10c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcdSend4Bits>
    SWAP(data);
 110:	81 2f       	mov	r24, r17
 112:	82 95       	swap	r24
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	12 95       	swap	r17
 118:	10 7f       	andi	r17, 0xF0	; 240
    lcdSend4Bits(data);
 11a:	81 2b       	or	r24, r17
 11c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcdSend4Bits>
 120:	8a e6       	ldi	r24, 0x6A	; 106
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <lcdSend4BitsMode+0x1a>
    
    _delay_us(40);
}
 126:	1f 91       	pop	r17
 128:	08 95       	ret

0000012a <lcdData>:
}	    
    
//send 8bit data to the LCD using R16 as argument
void lcdData(uint8_t data)
{
    SBI(LCD_RS_PORT, LCD_RS);
 12a:	90 9a       	sbi	0x12, 0	; 18
    lcdSend4BitsMode(data);
 12c:	0e 94 84 00 	call	0x108	; 0x108 <lcdSend4BitsMode>
}
 130:	08 95       	ret

00000132 <lcdString>:

void lcdString(char* str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	while (*str != 0) 
 138:	88 81       	ld	r24, Y
 13a:	88 23       	and	r24, r24
 13c:	31 f0       	breq	.+12     	; 0x14a <lcdString+0x18>
	{
		lcdData(*str);
 13e:	0e 94 95 00 	call	0x12a	; 0x12a <lcdData>
		++str;
 142:	21 96       	adiw	r28, 0x01	; 1
    lcdSend4BitsMode(data);
}

void lcdString(char* str)
{
	while (*str != 0) 
 144:	88 81       	ld	r24, Y
 146:	88 23       	and	r24, r24
 148:	d1 f7       	brne	.-12     	; 0x13e <lcdString+0xc>
	{
		lcdData(*str);
		++str;
	}	
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcdInt>:

void lcdInt(int16_t i)
{
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	7c 01       	movw	r14, r24
	if (i < 0) 
 160:	97 fd       	sbrc	r25, 7
 162:	41 c0       	rjmp	.+130    	; 0x1e6 <lcdInt+0x96>
		i = -i;
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	e8 16       	cp	r14, r24
 168:	f1 04       	cpc	r15, r1
 16a:	0c f4       	brge	.+2      	; 0x16e <lcdInt+0x1e>
 16c:	45 c0       	rjmp	.+138    	; 0x1f8 <lcdInt+0xa8>
 16e:	c7 01       	movw	r24, r14
 170:	10 e0       	ldi	r17, 0x00	; 0
	{
		tmp >>= 4;
 172:	95 95       	asr	r25
 174:	87 95       	ror	r24
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
		++str;
	}	
}

void lcdInt(int16_t i)
{
 182:	1c 5f       	subi	r17, 0xFC	; 252
		i = -i;
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	91 05       	cpc	r25, r1
 188:	a4 f7       	brge	.-24     	; 0x172 <lcdInt+0x22>
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 18a:	17 fd       	sbrc	r17, 7
 18c:	24 c0       	rjmp	.+72     	; 0x1d6 <lcdInt+0x86>
 18e:	0e c0       	rjmp	.+28     	; 0x1ac <lcdInt+0x5c>
	{
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	8c 0f       	add	r24, r28
 194:	0e 94 95 00 	call	0x12a	; 0x12a <lcdData>
		++str;
	}	
}

void lcdInt(int16_t i)
{
 198:	14 50       	subi	r17, 0x04	; 4
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 19a:	17 fd       	sbrc	r17, 7
 19c:	1c c0       	rjmp	.+56     	; 0x1d6 <lcdInt+0x86>
	{
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
		i -= div << log2;
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <lcdInt+0x54>
 1a0:	cc 0f       	add	r28, r28
 1a2:	dd 1f       	adc	r29, r29
 1a4:	ca 94       	dec	r12
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <lcdInt+0x50>
 1a8:	ec 1a       	sub	r14, r28
 1aa:	fd 0a       	sbc	r15, r29
		log2 += 4;	
	}
	
	while (log2 >= 0)
	{
		int16_t div = i >> log2;
 1ac:	c1 2e       	mov	r12, r17
 1ae:	dd 24       	eor	r13, r13
 1b0:	c7 fc       	sbrc	r12, 7
 1b2:	d0 94       	com	r13
 1b4:	e7 01       	movw	r28, r14
 1b6:	0c 2c       	mov	r0, r12
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcdInt+0x6e>
 1ba:	d5 95       	asr	r29
 1bc:	c7 95       	ror	r28
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <lcdInt+0x6a>
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
 1c2:	ca 30       	cpi	r28, 0x0A	; 10
 1c4:	d1 05       	cpc	r29, r1
 1c6:	24 f3       	brlt	.-56     	; 0x190 <lcdInt+0x40>
 1c8:	87 e3       	ldi	r24, 0x37	; 55
 1ca:	8c 0f       	add	r24, r28
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <lcdData>
		++str;
	}	
}

void lcdInt(int16_t i)
{
 1d0:	14 50       	subi	r17, 0x04	; 4
	{
		tmp >>= 4;
		log2 += 4;	
	}
	
	while (log2 >= 0)
 1d2:	17 ff       	sbrs	r17, 7
 1d4:	e4 cf       	rjmp	.-56     	; 0x19e <lcdInt+0x4e>
		int16_t div = i >> log2;
		lcdData(div + (div > 9 ? 'A'- 10: '0'));
		i -= div << log2;
		log2 -= 4;
	}	
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	08 95       	ret

void lcdInt(int16_t i)
{
	if (i < 0) 
	{
		lcdString("-");
 1e6:	8e e6       	ldi	r24, 0x6E	; 110
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 99 00 	call	0x132	; 0x132 <lcdString>
		i = -i;
 1ee:	f0 94       	com	r15
 1f0:	e1 94       	neg	r14
 1f2:	f1 08       	sbc	r15, r1
 1f4:	f3 94       	inc	r15
 1f6:	b6 cf       	rjmp	.-148    	; 0x164 <lcdInt+0x14>
	}
	int8_t log2 = 0;
	int16_t tmp = i;
	
	while (tmp > 15)
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	d8 cf       	rjmp	.-80     	; 0x1ac <lcdInt+0x5c>

000001fc <lcdInstr>:
	}	
}

void lcdInstr(uint8_t instr)
{
    CBI(LCD_RS_PORT, LCD_RS);
 1fc:	90 98       	cbi	0x12, 0	; 18
    lcdSend4BitsMode(instr);
 1fe:	0e 94 84 00 	call	0x108	; 0x108 <lcdSend4BitsMode>
 202:	08 95       	ret

00000204 <lcdClear>:
    lcdInstr(pos | (1<<7));
}

void lcdClear(void)
{
	lcdInstr(0x01); //0b00000001	
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20a:	80 e7       	ldi	r24, 0x70	; 112
 20c:	97 e1       	ldi	r25, 0x17	; 23
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcdClear+0xa>
	_delay_ms(3);
}	    
 212:	08 95       	ret

00000214 <lcdGoTo>:
}    
 
//move cursor to pos position (7 bit)
void lcdGoTo(uint8_t pos)
{
    lcdInstr(pos | (1<<7));
 214:	80 68       	ori	r24, 0x80	; 128
 216:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>
}
 21a:	08 95       	ret

0000021c <lcdInit>:
{
    // based on http://www.mimuw.edu.pl/~marpe/mikrokontrolery/w5_klawisze_lcd.pdf 
    // slide no. 26
    
    // set input/output direction
    SBI(LCD_DATA_DDR, LCD_D4);
 21c:	8a 9a       	sbi	0x11, 2	; 17
    SBI(LCD_DATA_DDR, LCD_D5);
 21e:	8b 9a       	sbi	0x11, 3	; 17
    SBI(LCD_DATA_DDR, LCD_D6);
 220:	8c 9a       	sbi	0x11, 4	; 17
    SBI(LCD_DATA_DDR, LCD_D7);      
 222:	8d 9a       	sbi	0x11, 5	; 17
    SBI(LCD_E_DDR, LCD_OE);   
 224:	89 9a       	sbi	0x11, 1	; 17
    SBI(LCD_RS_DDR, LCD_RS);
 226:	88 9a       	sbi	0x11, 0	; 17
    
    CBI(LCD_RS_PORT, LCD_RS);
 228:	90 98       	cbi	0x12, 0	; 18
    CBI(LCD_E_PORT, LCD_OE);
 22a:	91 98       	cbi	0x12, 1	; 18
 22c:	20 e9       	ldi	r18, 0x90	; 144
 22e:	31 e0       	ldi	r19, 0x01	; 1
 230:	48 ec       	ldi	r20, 0xC8	; 200
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	68 ec       	ldi	r22, 0xC8	; 200
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	ca 01       	movw	r24, r20
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcdInit+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	c1 f7       	brne	.-16     	; 0x234 <lcdInit+0x18>
    
    _delay_ms(40);
    
    SBI(LCD_E_PORT, LCD_OE);
 244:	91 9a       	sbi	0x12, 1	; 18
    SBI(LCD_DATA_PORT, LCD_D4);
 246:	92 9a       	sbi	0x12, 2	; 18
    SBI(LCD_DATA_PORT, LCD_D5);
 248:	93 9a       	sbi	0x12, 3	; 18
    CBI(LCD_DATA_PORT, LCD_D6);
 24a:	94 98       	cbi	0x12, 4	; 18
    CBI(LCD_DATA_PORT, LCD_D7);
 24c:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	98 2f       	mov	r25, r24
 252:	9a 95       	dec	r25
 254:	f1 f7       	brne	.-4      	; 0x252 <lcdInit+0x36>
    
    _delay_loop_1(1); // 3+ cycles

    CBI(LCD_E_PORT, LCD_OE);
 256:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 258:	e8 e0       	ldi	r30, 0x08	; 8
 25a:	f0 e2       	ldi	r31, 0x20	; 32
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcdInit+0x40>
    
    _delay_ms(4.1);
    
    SBI(LCD_E_PORT, LCD_OE);
 260:	91 9a       	sbi	0x12, 1	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 262:	98 2f       	mov	r25, r24
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <lcdInit+0x48>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 268:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26a:	fb 01       	movw	r30, r22
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcdInit+0x50>
    
    _delay_us(100);
    
    SBI(LCD_E_PORT, LCD_OE);
 270:	91 9a       	sbi	0x12, 1	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 272:	98 2f       	mov	r25, r24
 274:	9a 95       	dec	r25
 276:	f1 f7       	brne	.-4      	; 0x274 <lcdInit+0x58>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE);
 278:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27a:	fb 01       	movw	r30, r22
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcdInit+0x60>
    
    _delay_us(100);

    SBI(LCD_E_PORT, LCD_OE);
 280:	91 9a       	sbi	0x12, 1	; 18
    CBI(LCD_DATA_PORT, LCD_D4);
 282:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <lcdInit+0x68>
    
    _delay_loop_1(1); // 3+ cycles
    
    CBI(LCD_E_PORT, LCD_OE); 
 288:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28a:	cb 01       	movw	r24, r22
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcdInit+0x70>
    
    _delay_us(100);
        
    lcdInstr(0x28); //0b00101000
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>
    
    lcdInstr(0x06); //0b00000110
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>
    
    lcdInstr(0x0f); //0b00001111
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>

    lcdInstr(0x01); //0b00000001
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdInstr>
 2a8:	80 ea       	ldi	r24, 0xA0	; 160
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcdInit+0x90>
    
    _delay_ms(2);    
}    
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
